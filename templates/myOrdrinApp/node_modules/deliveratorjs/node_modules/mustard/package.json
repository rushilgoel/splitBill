{
  "name": "mustard",
  "version": "0.5.5",
  "description": "A client side library for including an ordr.in menu in a webpage",
  "author": {
    "name": "Ordr.in",
    "email": "tech@ordr.in"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ordrin/ordrin-client.git"
  },
  "keywords": [
    "mustard",
    "ordr.in"
  ],
  "license": "Apache",
  "readme": "# Mustard - client side food ordering\n\nMustard is a library that makes it easy to add Ordr.in powered food ordering to any website. This currently involves displaying a list of restaurants, an interactive menu, and a confirmation page.\n\n## Installation\n\nMustard currently must be served by a server that proxies the [Ordr.in API](http://ordr.in/developers/api) or can make requests to the API and insert the result into the page. Currently, we provide the node module [deliveratorjs](https://github.com/ordrin/deliveratorjs), which provides this and other functionality.\n\n## Quick start\n\nThe minimal page that will serve an menu is the following (assuming that `mustard.js` is in `/ordrin/script` and `main.css` is in `/ordrin/style`):\n\n```html\n<!Doctype html>\n<html>\n  <head>\n    <link href=\"/ordrin/style/main.css\" rel=\"stylesheet\" type=\"text/css\">\n    <!--[if lt IE 9]><script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script><![endif]-->\n    <script>\n      var ordrin = typeof ordrin===\"undefined\"?{}:ordrin;\n      var ordrin = typeof ordrin===\"undefined\"?{}:ordrin;\n      ordrin.init.rid = 141; // the restaurant's ordr.in ID\n      ordrin.init.page = \"menu\";\n      ordrin.init.render = true;\n      ordrin.restaurantUrl = ordrin.orderUrl = location.origin+\"path/to/api/proxy\";\n      (function(){\n        var ow = document.createElement('script'); ow.type = 'text/javascript'; ow.async = true;\n        ow.src = '/ordrin/script/mustard.js';\n        var s = document.getElementsByTagName('script')[0];\n        s.parentNode.insertBefore(ow, s);  \n      })();\n    </script>\n  </head>\n  <body>\n    <div id=\"ordrinMenu\"></div>\n  </body>\n</html>\n```\n\nA few things to note about the page:\n\n1. We only support loading Mustard asynchronously.\n2. Currently, all parameters must be passed to Mustard by assigning to keys in the `ordrin` javascript object.\n3. For Mustard to function, the menu HTML must be in a `<div>` with the id `ordrinMenu`. If Mustard is rendering the menu, as in this example, the `<div>` should be empty as its contents will be overwritten.\n\n### No Proxy\n\nIf you want to make this quick start page but don't have a server that proxies the Ordr.in API, you can still render the page by adding only a couple of lines of code to the script tag in the quick start page. After the line that sets the `ordrin` variable, the following two lines should be added:\n\n```js\nordrin.init.noProxy = true;\nordrin.init.menu = {{{data}}};\n```\n\nFill in `{{{data}}}` by making a request to the restaurant details function of the [Restaurant API](http://ordr.in/developers/restaurant) and replacing `{{{data}}}` with the value of the `menu` key in the repsonse to that API call.\n\nIn this case, the `restaurantUrl` and `orderUrl` variables are not needed and will not have any effect, so the line setting them is not required.\n\n### Resources\n\nMustard includes the [JavaScript Ordr.in API wrapper](https://github.com/ordrin/api-js), [tomato](https://github.com/ordrin/tomato) (our persistence library), [Mustache](https://github.com/janl/mustache.js) (in `ordrin.Mustache`) and [EventEmitter2](https://github.com/hij1nx/EventEmitter2).\n\nOnce Mustard initializes its instance of EventEmitter2, it will call `ordrin.emitterLoaded` with that instance and then delete `ordrin.emitterLoaded`.\n\n### Interface\n\nThis is a summary of the interface to Mustard. More detail can be found in the next section\n\n#### Initialization\nMustard may use the following values if they are set in `ordrin.init` *before* Mustard loads:\n\n - [`address`](#delivery-address)\n - [`deliveryTime`](#delivery-datetime)\n - [`page`](#page)\n - [`render`](#render)\n - [`noProxy`](#no-proxy-1)\n - [`restaurantsTemplate`](#restaurant-list-template)\n - [`menu_uri`](#menu-uri-root)\n - [`rid`](#restaurant-id)\n - [`menu`](#menu)\n - [`menuTemplate`](#menu-template)\n - [`dialogTemplate`](#dialog-template)\n - [`trayItemTemplate`](#tray-item-template)\n - [`tray`](#tray)\n - [`tip`](#tip)\n\n#### Mustard interface\nAfter Mustard has loaded, it will emit an event `moduleLoaded.mustard` with a reference to `ordrin.mustard`, which will have the following functions:\n\n - [`getRid()`](#restaurant-id)\n - [`getMenu()`](#menu)\n - [`getAddress()`](#delivery-address)\n - [`setAddress(address)`](#delivery-address)\n - [`getDeliveryTime()`](#delivery-datetime)\n - [`setDeliveryTime(deliveryTime)`](#delivery-datetime)\n - [`getTray()`](#tray)\n - [`setTray(tray)`](#tray)\n - [`getTip()`](#tip)\n - [`setRestaurant(rid, [menu])`](#menu)\n\n### The Pages\n\nMustard can render three pages: a list of restaurants, a menu, and a confirmation page.\n\nBoth pages currently use the following values. Many can be initialized in `ordrin.init`, and some can be accessed through `ordrin.mustard`\n\n#### Delivery address\nThe address that food should be delivered to. This should be an instance of `ordrin.api.Address`\n\nDirect: `ordrin.init.address`\n\nAccessors: `ordrin.mustard.getAddress()`, `ordrin.mustard.setAddress()` \n\n#### Delivery date/time\nThe time at which the food should be delivered. This should be either the string `ASAP`, a string of the form `MM-dd+HH:mm`, or a `Date` object in the future.\n\nInit: `ordrin.init.deliveryTime`\n\nAccessors: `ordrin.mustard.getDeliveryTime()`, `ordrin.mustard.setDeliveryTime()`\n\n#### Page\nTells Mustard what to do with when the page loads. The value should be `\"menu\"` to process the menu or `\"restaurants\"` to process the restaurant list.\n\nInit: `ordrin.init.page`\n\n#### Render\nTells Mustard whether it should create the HTML and put it in the page, or use what is already there.\n\nInit: `ordrin.init.render`\n\n#### No Proxy\nMustard will not make any API requests if this value is truthy.\n\nInit: `ordrin.init.noProxy`\n\n### Restaurant List\n\nMustard will render a restaurant list into  a `<div>` with the id `ordrinRestaurants` when it loads if `page` is set to `restaurants`. After Mustard has loaded, a new restaurant list can be rendered into the same `<div>` by calling `ordrin.mustard.setAddress()` or `ordrin.mustard.setDeliveryTime()`\n\n#### Menu\nA menu in the same structure as the value of the `menu` key in the return value of the [Restaurant API](http://ordr.in/developers/restaurant) details function. If this is not provided before Mustard loads, Mustard will attempt to download it from the API using the restaurant ID.\n\nDirect: `ordrin.init.menu`\n\nAccessors: `ordrin.mustard.getMenu()`\n\n#### Tray\nA tray of items. An instance of `Tray`.\n\nInit: `ordrin.init.tray`\n\nAccessor: `ordrin.mustard.getTray()`, `ordrin.mustard.setTray()`\n\n#### Tip\nThe tip as an integer number of cents.\n\nDirect: `ordrin.init.tip`\n\nAccessor: `ordrin.mustard.getTip()`\n\nThis page also uses the following values:\n\n#### Restaurant List\nThe list of restuarant objects in the same form as the return value of the delivery list request in the [Restaurant API](http://ordr.in/developers/restaurant). If this is not provided before Mustard loads, Mustard will attempt to download it from the API using the `address` and `dateTime`.\n\n#### Restaurant List Template\nA string containing a [Mustache](https://github.com/janl/mustache.js) template for rendering the list of restaurants. The default is at `templates/restaurants.html.mustache`\n\nInit: `ordrin.init.restaurantsTemplate`\n\n#### Menu URI root\nInit: `ordrin.init.menu_uri`\n\n### Menu\n\nMustard will render a menu into a `<div>` with the id `ordrinMenu` when if loads if `page` is set to `\"menu\"`. After Mustard has loaded, a new menu can be loaded into he same `<div>` by calling `ordrin.mustard.setRestaurant()`\n\nThis page also uses the following values:\n\n#### Restaurant ID\nOrdr.in's ID number for the restaurant\n\nInit: `ordrin.init.rid`\n\nAccessors: `ordrin.mustard.getRid()`\n\n#### Menu Template\nA string containing a [Mustache](https://github.com/janl/mustache.js) template for rendering the menu. The default is at `templates/menu.html.mustache`.\n\nInit: `ordrin.init.menuTemplate`\n\n#### Dialog Template\nA string containing a [Mustache](https://github.com/janl/mustache.js) template for rendering the dialog box for selecting item options and quantity. The default is at `templates/dialog.html.mustache`.\n\nInit: `ordrin.init.dialogTemplate`\n\n#### Tray Item Template\nA string containing a [Mustache](https://github.com/janl/mustache.js) template for rendering an item in the tray. The default is at `templates/trayItem.html.mustache`.\n\nInit: `ordrin.init.trayItemTemplate`\n\n### Confirm\n\nMustard will render a confirmation page into a `<div>` with teh id `ordrinConfirm` when it loads if `\"confirm\"`.\n\nThis page also uses the following values:\n\n#### Confirm Template\nA string containing a [Mustache](https://github.com/janl/mustache.js) template for rendering the confirmation page. The default is at `templates/confirm.html.mustache`.\n\nInit: `ordrin.init.confirmTemplate`",
  "readmeFilename": "README.md",
  "_id": "mustard@0.5.5",
  "dist": {
    "shasum": "67b127bd1ed38c435197b5fd7a05cb1984cd111d"
  },
  "_resolved": "git://github.com/ordrin/mustardjs.git#d4fb8bdb996b09257f0ace8881bfd220a197f784",
  "_from": "mustard@git://github.com/ordrin/mustardjs.git#master"
}
