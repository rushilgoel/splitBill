{
  "name": "async",
  "description": "Higher-order functions and common patterns for asynchronous code",
  "main": "./index",
  "author": {
    "name": "Caolan McMahon"
  },
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "http://github.com/caolan/async.git"
  },
  "bugs": {
    "url": "http://github.com/caolan/async/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/caolan/async/raw/master/LICENSE"
    }
  ],
  "readme": "# Async\n_Higher-order functions and common patterns for asynchronous code in node and\nthe browser_\n\nI've so far avoided using the existing async modules in favour of the standard\ncallbacks provided by node. When writing modules, I find sticking to the\nconvention of using a single callback makes the API easier to understand, and\nallows people to wrap the module with other methods of handling async code if\nthey so wish.\n\nHowever, I've found myself repeating a number of patterns, so I've decided to\nabstract some of the more common ones into a separate module. What I've ended\nup with is a few higher-order functions that operate on async code using the\nconvention of a single callback. This includes the usual 'functional'\nsuspects (map, reduce, filter, forEach...) as well as some common patterns\nfor running blocks of async code (parallel, series, waterfall...).\n\n__This is not an attempt to replace the standard callback mechanism in\nnode.__ In fact, it is designed to work as seamlessly as possible with the\nexisting node modules, and any other module which follows those conventions.\nIf you're interested in other ways to manage async code, then you may like\nto take a look at the new implementation of the old node Promise objects\n([node-promise](http://github.com/kriszyp/node-promise)) or alternative\nmodules like [node-continuables](http://github.com/bentomas/node-continuables).\n\n__This module enables you to do things like:__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the API below for a\nfull list. This module aims to be a comprehensive collection of async\nutilities, so if you feel anything is missing please create a GitHub issue for\nit.\n\n__Also available as an npm package:__\n\n    npm install async\n\n__Now works in the browser too!__\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n## API\n\n### Collections\n\n* __forEach (forEachSeries)__ - Applies an async iterator to each item in an\n  array.\n* __map (mapSeries)__ - Produces a new array of values by mapping each value\n  in the given array through an async iterator function.\n* __filter (filterSeries)__ - Returns a new array of all the values which pass\n  an async truth test.\n* __reject (rejectSeries)__ - The opposite of filter, removes items that\n  passes an async test.\n* __reduce (reduceRight)__ - Reduces a list of values into a single value\n  using an async iterator to return each successive step.\n* __detect (detectSeries)__ - Returns the first value is a list that passes an\n  async truth test.\n* __sortBy__ - Sorts a list by the results of running each value through an\n  async iterator, leaving the original values intact.\n* __some__ - Returns true if at least one element in the array satisfies an\n  async test.\n* __every__ - Returns true if every element in the array satisfies an async\n  test.\n\n### Flow Control\n\n* __series__ - Run an array of functions in series, each one running once the\n  previous function has completed.\n* __parallel__ - Run an array of functions in parallel, without waiting until\n  the previous function has completed.\n* __waterfall__ - Runs an array of functions in series, each passing their\n  results to the next in the array.\n* __auto__ - Determines the best order for running functions based on their\n  requirements.\n* __iterator__ - Creates an iterator function which calls the next function in\n  the array, returning a continuation to call the next one after that.\n* __apply__ - Creates a continuation with some arguments already applied, a\n  useful shorthand when combined with other flow control functions.\n\n\n## Collections\n\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is inline with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterator over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterator over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is inline with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterator over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is inline with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterator over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n\n## Flow Control\n\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err) - An optional callback to run once all the functions have\n  completed. This function gets passed any error that may have occurred.\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        }\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        }\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ]);\n\n\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass and error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  sytax is easier to understand by looking at the example.\n* callback(err) - An optional callback which is called when all the tasks have\n  been completed. The callback may recieve an error as an argument.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        }],\n        email_link: ['write_file', function(callback){\n            // once the file is written let's email a link to it...\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: ['write_file', function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable. \n\n\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other flow control functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n",
  "readmeFilename": "README.md",
  "_id": "async@0.1.2",
  "_from": "async@0.1.2"
}
