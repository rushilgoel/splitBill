{
  "name": "ordrin-api",
  "version": "0.1.102",
  "private": false,
  "description": "A node library wrapper for the ordr.in food ordering API.",
  "dependencies": {
    "underscore": "1.3.3"
  },
  "devDependencies": {
    "prompt": "0.2.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ordrin/api-node"
  },
  "main": "./main",
  "readme": "# Ordr.in Node Library\n\n## About\nA node library for the ordr.in API  \nSee full API documantation at <a href=\"http://ordr.in/developers\">http://ordr.in/developers</a>\nAlso check out a working demo of all the api calls by running demo.js\n\n## Installation\nThe simplest way to install is with npm:  \n<pre>\n  npm install ordrin-api\n</pre>\n\n\n## Usage  \n\n### Initialization\n<pre>\n  var ordrinApi = require(\"ordrin-api\");\n\n  var ordrin = ordrinApi.init({\n    apiKey: \"YOUR-ORDRIN-API-KEY\",\n    restaurantUrl: \"r-test.ordr.in\",\n    userUrl: \"u-test.ordr.in\",\n    orderUrl: \"o-test.ordr.in\"\n  });\n</pre>\nNote that for the Urls https:// and the trailing / are all implied. You can also specify a full url like \"http://localhost:8888\" if you want to control the schee and port.\n\nAlternatively you can set the servers field to either \"test\" or \"production\" to have the wrapper set the server url's for you. That looks like this:\n<pre>\n  var ordrinApi = require(\"ordrin-api\");\n\n  var odrin = ordrinApi.init({\n    apiKey: \"YOUR_ORDRIN_API_KEY\",\n    servers: \"test\"\n  });\n</pre>\n\n### Callbacks\nBecause node is async every function call you make to the ordrin api includes a callback. This will be called when the api has finished your request. The format of this callback is always the same.  \nIt takes two parameters: error and data.  \nIf there's no error than error will be false, otherwise it will be an object.  \nData is an object containing the data returned from the ordr.in api as described in the API documentation located at <a href=\"http://ordr.in/developers\">http://ordr.in/developers</a>.\n\nExample function callback:  \n<pre>\n  var callback = function(error, data){\n    if (error){\n      console.error(\"Ordr.in API error\", error.msg);\n    }else{\n      // program logic\n    }\n  }\n</pre>\n\n### Data Structures\nThe following classes are part of the library and are used whenever you need to pass an address, credit card, user, tray item, or tray to a library function.\n\n<pre>\n  Address = {\n    addr: String,\n    city: String,\n    state: String,\n    zip: Number,\n    phone: String,\n    addr2: String\n  }\n\n  CreditCard = {\n    name: String,\n    expiryMonth: Number,\n    expiryYear: Number,\n    billAddress: String, // An object of the above address class\n    number: Number,\n    cvc: Number\n  }\n\n  UserLogin = {\n    email: String,\n    password: String // this is always an unencoded password \n  }\n\n  TrayItem = {\n    itemId: Number,\n    quantity: Number,\n    options: Array // array of option ids\n  }\n\n  Tray = {\n    items: Array // array of trayItem objects of the above class\n  }\n</pre>\nYou can create an object of one of these classes like so:\n<pre>\n  var user = new Ordrin.UserLogin(\"example@example.com\", \"password\");\n  var address = new Ordrin.Address(\"1 Main Street\", \"College Station\", \"RDS\", 77840, 1234);\n</pre>\n\n### Validation\nEach of the above Data Structers throw errors if you pass invalid values to their constructors. The errors are children \nof the javascript Error class, and include the additional property fieldErrors. This describes the \ndifferent validation errors that occured. \nExample of BAD address initialization:\n<pre>\n  try{\n    var address = new Ordrin.Address(\"1 Main Street\", \"College Station\", \"RDS\", 7740, 1234);\n  }catch (e){\n    console.log(e.fieldErrors);\n  }\n</pre>\nThe above example will print out an object that contains the properties: state, zip, and phone since those were the invalid properties. And a short message with each one that describes what was invalid. \nYou can see validation in action in the demo script.\n\n\n### Restaurant API\n<pre>\n  ordrin.restaurant.getDeliveryList(dateTime, address, callback);\n  \n  ordrin.restaurant.getDeliveryCheck(restaurantId, dateTime, address, callback);\n\n  ordrin.restaurant.getFee(restaurantId, subtotal, tip, dateTime, address, callback);\n\n  ordrin.restaurant.getDetails(restuarantId, callback);\n</pre>\n\n### User API\n<pre>\n  ordrin.user.getUser(userLogin, callback);\n\n  ordrin.user.createUser(userLogin, firstName, lastName, callback);\n\n  ordrin.user.getAllAddresses(userLogin, callback);\n\n  ordrin.user.getAddress(userLogin, addressName, callback);\n\n  ordrin.user.setAddress(userLogin, addressName, address, callback);\n\n  ordrin.user.removeAddress(userLogin, addressName, callback);\n\n  ordrin.user.getAllCreditCards(userLogin, callback);\n\n  ordrin.user.getCreditCard(userLogin, cardName, callback);\n\n  ordrin.user.setCreditCard(userLogin, cardName, creditCard, callback);\n\n  ordrin.user.removeCreditCard(userLogin, cardName, callback);\n\n  ordrin.user.getOrderHistory(userLogin, callback);\n\n  ordrin.user.getOrderDetails(userLogin, orderId, callback);\n\n  ordrin.user.setPassword(userLogin, newPassword, callback);\n</pre>\n\n### Order API\nThe Order API includes the ability to create a new user when you place the order. If you want to do that just pass in the new user's login credentials in the user object, and set createUser to true.\n\nIf you don't want the order to be associated with a user account then pass in false as the password inside the user object, and setCreateUser to false.\n\n<pre>\n  ordrin.order.placeOrder(restaurantId, tray, tip, deliveryTime, firstName, lastName, address, creditCard, user, createUser, callback)\n</pre>\n",
  "readmeFilename": "README.md",
  "_id": "ordrin-api@0.1.102",
  "_from": "ordrin-api@0.1.x"
}
